#Subarray Sum Equals K


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int count=0;
        for(int i=0;i<nums.size();i++){
            int sum=0;
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                if(sum==k)
                    count++;
            }
        }
        return count;
    }
};

# Bitwise AND of Numbers Range


#define ll long ong 
class Solution {
public:
    int rangeBitwiseAnd(int m, int n) {
       ll count=0;
        while(m!=n){
            m=m>>1;
            n=n>>1;
            ++count;
        }
        m=m<<count;
        return m;
    }
};

#Implement LRU cache

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity=capacity
        self.map=OrderedDict()
        
        

    def get(self, key: int) -> int:
        self.key=key
        if self.key in self.map:
            self.value=self.map.pop(self.key)
            self.map[key]=self.value
            return self.value
        return -1
            
        

    def put(self, key: int, value: int) -> None:
        self.key=key
        self.value=value
        if self.key in self.map:
            self.map.pop(self.key)
        elif self.capacity==len(self.map):
            self.map.popitem(last=False)
        self.map[self.key]=self.value
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
