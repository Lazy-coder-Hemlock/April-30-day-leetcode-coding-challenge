#Subarray Sum Equals K


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int count=0;
        for(int i=0;i<nums.size();i++){
            int sum=0;
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                if(sum==k)
                    count++;
            }
        }
        return count;
    }
};

# Bitwise AND of Numbers Range


#define ll long ong 
class Solution {
public:
    int rangeBitwiseAnd(int m, int n) {
       ll count=0;
        while(m!=n){
            m=m>>1;
            n=n>>1;
            ++count;
        }
        m=m<<count;
        return m;
    }
};

#Implement LRU cache

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity=capacity
        self.map=OrderedDict()
        
        

    def get(self, key: int) -> int:
        self.key=key
        if self.key in self.map:
            self.value=self.map.pop(self.key)
            self.map[key]=self.value
            return self.value
        return -1
            
        

    def put(self, key: int, value: int) -> None:
        self.key=key
        self.value=value
        if self.key in self.map:
            self.map.pop(self.key)
        elif self.capacity==len(self.map):
            self.map.popitem(last=False)
        self.map[self.key]=self.value
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)





#jump game

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int m=nums[0];
        if(nums.size()<=1)
            return true;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0 && m<=i)
                return false;
            m=max(m,i+nums[i]);
            if(m>=nums.size()-1)
                return true;
       }
       return false; 
    }
};


#Longest common subsequence

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
     int first=text1.size();
        int second=text2.size();
        int dp[first+1][second+1];
        memset(dp,0,sizeof(dp));
        for(int i=1;i<=first;i++){
            for(int j=1;j<=second;j++){
                if(text1[i-1]==text2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[first][second];
    }
};



#Maximal square
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size()==0)
            return 0;
        int row=matrix.size();
        int col=matrix[0].size();
        int largest=0;
        vector<vector<int>>arr(row+1,vector<int>(col+1,0));
        for(int i=1;i<=row;i++){
            for(int j=1;j<=col;j++){
                if(matrix[i-1][j-1]=='1')
                    arr[i][j]=1+min(arr[i-1][j],min(arr[i][j-1],arr[i-1][j-1]));
                largest=max(largest,arr[i][j]);
            }
        }
        return largest*largest;
    }
};
