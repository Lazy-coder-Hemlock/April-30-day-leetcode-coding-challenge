#Binary tree maximum path sum

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        self.m=float("-inf")
        def dfs(root):
            if root is None:
                return 0
            left=max(0,dfs(root.left))
            right=max(0,dfs(root.right))
            self.m=max(self.m,left+right+root.val)
            return max(left,right)+root.val
        dfs(root)
        return self.m
        
  
  
  #Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool isValidSequence(TreeNode* root,int n,int pos,vector<int>& arr)
    {
        if(!root)
            return false;
        else if(pos==n)
            return false;
        else if(root->val!=arr[pos])
            return false;
        else if(!root->left && !root->right && pos==n-1)
            return true;
        
        return (isValidSequence(root->left,n,pos+1,arr) || isValidSequence(root->right,n,pos+1,arr));
    }
public:
    bool isValidSequence(TreeNode* root, vector<int>& arr) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int n = arr.size();
        int pos = 0;
        return isValidSequence(root,n,pos,arr);
    }
};
