#Middle of Linked List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        slow=head
        fast=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        return slow
        
        
#BackString Compare

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        stack<char>s;
        stack<char>t;
        for(int i=0;i<S.length();i++){
            if(s.empty() and S[i]=='#')
                ;
            else if(!s.empty() and S[i]=='#'){
                s.pop();
            }
            else
                s.push(S[i]);
        }
                for(int i=0;i<T.length();i++){
                    if(t.empty() and T[i]=='#')
                        ;
                    else if(!t.empty() and T[i]=='#'){
                        t.pop();
                    }
                    else
                        t.push(T[i]);
                }
        string first="";
        string last="";
        while(!s.empty())
        {
            first+=s.top();
            s.pop();
        }
        while(!t.empty()){
            last+=t.top();
            t.pop();
        }
        reverse(first.begin(),first.end());
        reverse(last.begin(),last.end());
        return first==last;
                
        }  
};

#Min Stack

class MinStack:

    def __init__(self):
        self.l=[]
        """
        initialize your data structure here.
        """
        

    def push(self, x: int) -> None:
        self.l.append(x)
        

    def pop(self) -> None:
        if len(self.l)==0:
            return -1
        self.l.pop()
        

    def top(self) -> int:
        if len(self.l)==0:
            return -1
        return self.l[-1]
        
        

    def getMin(self) -> int:
        if len(self.l)==0:
            return -1
        return min(self.l)
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
   
   
#diameter of Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        int lheight=height(root->left);
        int rheight=height(root->right);
        int ldiameter=diameterOfBinaryTree(root->left);
        int rdiameter=diameterOfBinaryTree(root->right);
        return max(lheight+rheight,max(ldiameter,rdiameter));
    }
    int height(TreeNode *p){
        if(p==NULL)
            return 0;
        return 1+max(height(p->left),height(p->right));
    }
    
};


#stone weight
class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        if len(stones)==0:
            return 0
        if len(stones)==1:
            return 1
        while len(stones)>1:
            stones.sort()
            first=stones[-1]
            second=stones[-2]
            if first==second:
                stones.pop(-1)
                stones.pop(-1)
            else:
                first=abs(first-second)
                stones.pop(-1)
                stones[-1]=first
        if len(stones)==0:
            return 0
        return stones[-1]
        
        
