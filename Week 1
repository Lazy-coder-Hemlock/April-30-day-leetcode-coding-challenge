#single_Number

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res=nums[0];
        for(int i=1;i<nums.size();i++){
            res=res^nums[i];
        }
        return res;
    }
};


#Happy Number
class Solution {
public:
    bool isHappy(int n){
set<int>s;
while(1){
n=square(n);
if(n==1)
return true;
else
if(s.find(n)!=s.end())
return false;
s.insert(n);
}
}
   int square(int n){
	int res=0;
	while(n!=0){
		int r=n%10;
		res+=r*r;
		n/=10;
	}
	return res;
}
};

#Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max_so_far=INT_MIN;
        int max_ending=0;
        for(int i=0;i<nums.size();i++){
            max_ending+=nums[i];
            if(max_ending>max_so_far)
                max_so_far=max_ending;
            if(max_ending<0)
                max_ending=0;
        }
        return max_so_far;
        
    }
};
#Move Zeroes

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
    int j=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]){
                nums[j]=nums[i];
            j++;
            }
        }
        while(j<nums.size()){
            nums[j]=0;
            j++;
        }
    }
};

#Best time to Buy and Sell Stock II

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]>prices[i-1])
                res+=(prices[i]-prices[i-1]);
        }
        return res;
        
    }
};

#Group Anagrams

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        d={}
        l=[]
        for i in strs:
            s_word=''.join(sorted(i)) 
            if s_word not in d:
                d[s_word]=[i]
            else:
                d[s_word].append(i)
        for i in d:
            l.append(d[i])
        return l
            


