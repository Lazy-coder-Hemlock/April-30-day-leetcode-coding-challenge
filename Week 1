#single_Number

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res=nums[0];
        for(int i=1;i<nums.size();i++){
            res=res^nums[i];
        }
        return res;
    }
};


#Happy Number
class Solution {
public:
    bool isHappy(int n){
set<int>s;
while(1){
n=square(n);
if(n==1)
return true;
else
if(s.find(n)!=s.end())
return false;
s.insert(n);
}
}
   int square(int n){
	int res=0;
	while(n!=0){
		int r=n%10;
		res+=r*r;
		n/=10;
	}
	return res;
}
};

#Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max_so_far=INT_MIN;
        int max_ending=0;
        for(int i=0;i<nums.size();i++){
            max_ending+=nums[i];
            if(max_ending>max_so_far)
                max_so_far=max_ending;
            if(max_ending<0)
                max_ending=0;
        }
        return max_so_far;
        
    }
};

