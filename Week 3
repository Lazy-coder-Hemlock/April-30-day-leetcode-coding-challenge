

#product of array except itself
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int []left=new int[nums.length];
        int []right=new int[nums.length];
        Arrays.fill(left,1);
        Arrays.fill(right,1);
        for(int i=1;i<nums.length;i++)left[i]=left[i-1]*nums[i-1];
        for(int i=nums.length-2;i>=0;i--)right[i]=right[i+1]*nums[i+1];
        int []result=new int[nums.length];
        for(int i=0;i<nums.length;i++){
            result[i]=left[i]*right[i];
        }
        return result;
        
    }
}

#valid parenthesis string
class Solution {
public:
    bool checkValidString(string s) {
        
        stack<int> open,star;
        int len = s.length();
        
        for(int i=0;s[i]!='\0';++i)
        {
            if(s[i]=='(')
                open.push(i);
            else if(s[i]=='*')
                star.push(i);
            else
            {
                if(!open.empty())
                    open.pop();
                else if(!star.empty())
                    star.pop();
                else
                    return false;
            }
        }
        
        while(!open.empty())
        {
            if(star.empty())
                return false;
            else if(open.top() < star.top())
            {
                open.pop();
                star.pop();
            }
            else    
                return false;
        }
        return true;
    }
};



#Number of islands

class Solution {
void mark(vector<vector<char>>&mat,int x,int y,int r,int c){
 if(x<0 || x>=r || y<0 || y>=c || mat[x][y]!='1')
     return;
    mat[x][y]='2';
    mark(mat,x+1,y,r,c);
    mark(mat,x,y+1,r,c);
    mark(mat,x-1,y,r,c);
    mark(mat,x,y-1,r,c);
}    
    public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size()==0)
            return 0;
        int row=grid.size();
        int col=grid[0].size();
        int island=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]=='1')
               island++; 
                    mark(grid,i,j,row,col);
              
            }
        }
        return island;
    }
};

#Minimum path sum

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
       if(grid.size()==0)
            return 0;
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<int>>arr(row,vector<int>(col,0));
        arr[0][0]=grid[0][0];
        for(int i=1;i<col;i++){
            arr[0][i]=arr[0][i-1]+grid[0][i];
        }
        for(int i=1;i<row;i++){
            arr[i][0]=arr[i-1][0]+grid[i][0];
        }
        for(int i=1;i<row;i++){
            for(int j=1;j<col;j++){
                arr[i][j]=grid[i][j]+min(arr[i-1][j],arr[i][j-1]);
            }
        }
        return arr[row-1][col-1];
    }
};







#Search in a Rotated Sorted Array

class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target)
                return mid;
             if(nums[mid]<=nums[high]){
                if(target>nums[mid] && target<=nums[high])
                    low=mid+1;
                else
                    high=mid-1;
            }
            else{
                if(nums[mid]>target && nums[low]<=target)
                    high=mid-1;
                    else
                        low=mid+1;

            }
        }
        return -1;
    }
}


